# Проект "WeAi (Aiassist)" - Документация Разработки

**Версия:** 0.1 (MVP)

## 1. Видение и Цели Проекта

### 1.1. Глобальное Видение (Долгосрочная Цель)

Создание децентрализованной социальной платформы и общественной системы жизнеобеспечения на базе ИИ. Цель системы – максимальное удовлетворение потребностей каждого участника, обеспечение достойного качества жизни и равного доступа к ресурсам. Платформа призвана помочь человечеству в решении глобальных проблем (бедность, неравенство, нехватка ресурсов, конфликты, загрязнение) путем интеллектуальной координации, планирования, управления ресурсами и содействия самореализации каждого человека. ИИ предложит лучшие решения и доступ ко всем существующим сегодня инструментам и возможностям.

### 1.2. Цели MVP (Minimum Viable Product)

*   ИИ-ассистент помогающий пользователям формулировать личные цели, составлять планы их достижения и отслеживать прогресс по задачам, также находить все возможные средства, ресурсы и инструменты для исполнения задач + собственные возможности ИИ.
*   **Создать базовую инфраструктуру:** Пользовательские аккаунты, ввод и отображение целей/задач, базовый ИИ-помощник (на правилах/простых API).
*   **Реализовать вовлекающий онбординг:** Быстро показать ценность через ленту вдохновения, выбор интересов и геймификацию.
*   **Начать сбор данных:** Анонимизированные данные о целях, планах, взаимодействии с ИИ и пользовательских откликах для его дальнейшего обучения и улучшения.
*   **Обеспечить простую и удобную авторизацию.**
*   **Заложить архитектурную и модельную основу** для будущих модулей Финансов и Социального взаимодействия, реализовав базовые экраны (отображение баланса/истории, заглушка для Social).

### 1.3. Целевая Аудитория MVP

Люди, заинтересованные в личностном росте, постановке и достижении целей, самоорганизации. Категории аудитории по ключевым желаниям: получение дохода, перспективы развития карьеры/бизнеса, эффективное инвестирование, улучшение здоровья, освобождение личного времени, другие сферы жизни. (Например, ищущие подработку фрилансеры, студенты, молодые специалисты, люди, желающие изменить жизнь).

## 2. Технологический Стек

*   **Фреймворк Frontend:** Next.js (с использованием React)
*   **Язык:** TypeScript (для Frontend и Backend)
*   **Стилизация:** Tailwind CSS (или другой UI-кит, например, Chakra UI, Material UI - *определить окончательно*)
*   **Backend:** Node.js (интегрирован в Next.js API Routes)
*   **База Данных:** PostgreSQL
    *   **ORM:** Prisma
*   **Аутентификация:** NextAuth.js
    *   Поддержка: Telegram Login, Google, Apple ID (и другие OAuth по необходимости).
*   **ИИ/ML (MVP):**
    *   Базовый NLP (API внешних сервисов OpenAI/Claude/др. с четким контролем и возможностью кэширования; или локальные простые библиотеки).
    *   Системы на правилах для декомпозиции целей.
    *   Простые алгоритмы рекомендаций (на основе выбранных интересов и популярных целей).
*   **Хостинг/Инфраструктура:** Vercel (предпочтительно), Netlify, AWS, Google Cloud, Supabase.

## 3. Архитектура MVP (Высокоуровневая)

*   **Клиент (Веб-приложение):** Интерфейс пользователя на Next.js (React), взаимодействие с API.
*   **Backend API (Next.js API Routes):** Обработка запросов, бизнес-логика, взаимодействие с Prisma (БД), NextAuth.js, вызовы к ИИ-компоненту/сервису.
*   **База Данных (PostgreSQL):** Хранение данных (пользователи, цели, задачи, транзакции, взаимодействия с ИИ).
*   **Сервис Аутентификации (NextAuth.js):** Обработка входа, регистрации, управление сессиями.
*   **ИИ-Ассистент (Компонент/Модуль):** Логика обработки запросов к ИИ, взаимодействие с внешними API или внутренними правилами. Может быть частью Backend API в MVP.

## 4. Модель Данных (База Данных - PostgreSQL с Prisma)

```prisma
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  telegramId    String?   @unique
  googleId      String?   @unique
  appleId       String?   @unique
  email         String?   @unique
  name          String?
  avatarUrl     String?
  balance       Decimal   @default(0.00) @db.Decimal(12, 2) // Внутренний баланс (баллы или виртуальные токены для MVP)
  preferences   Json?     // Настройки (тема, уведомления, interestAreas: String[])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  goals         Goal[]
  tasks         Task[]
  aiInteractions AIInteraction[]
  transactions  FinanceTransaction[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id            String     @id @default(cuid())
  userId        String
  title         String
  description   String?    @db.Text
  status        GoalStatus @default(BACKLOG)
  dueDate       DateTime?
  priority      Int?
  isWish        Boolean    @default(false) // Для Карты Желаний
  position      Json?      // { x: number, y: number } для Карты Желаний
  aiPlan        Json?      // { steps: Array<{ title: string, description?: string }>, resources?: Array<{ name: string, url: string }> }
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks         Task[]
  aiInteractions AIInteraction[]
}

enum GoalStatus {
  BACKLOG
  IN_PROGRESS
  DONE
  ARCHIVED
}

model Task {
  id            String     @id @default(cuid())
  userId        String
  goalId        String?
  title         String
  description   String?    @db.Text
  status        TaskStatus @default(TODO)
  dueDate       DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal          Goal?      @relation(fields: [goalId], references: [id], onDelete: SetNull)
  aiInteractions AIInteraction[]
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model AIInteraction {
  id            String    @id @default(cuid())
  userId        String
  goalId        String?
  taskId        String?
  userInput     String    @db.Text
  aiResponse    String?   @db.Text // Текстовый ответ
  aiSuggestions Json?     // Структурированные данные (план, ресурсы и т.д.)
  userFeedback  Int?      // Оценка (например, -1, 0, 1)
  feedbackComment String? @db.Text
  timestamp     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal          Goal?     @relation(fields: [goalId], references: [id], onDelete: SetNull)
  task          Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
}

model FinanceTransaction {
  id            String        @id @default(cuid())
  userId        String
  amount        Decimal       @db.Decimal(12, 2) // Сумма (+ доход/пополнение, - расход)
  type          TransactionType
  description   String?
  timestamp     DateTime      @default(now())
  relatedGoalId String?       // ID цели, за которую получена награда (опционально)
  relatedTaskId String?       // ID задачи, за которую получена награда (опционально)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  DEPOSIT      // Внешнее пополнение (не в MVP)
  WITHDRAWAL   // Внешний вывод (не в MVP)
  REWARD       // Награда за действие в системе (геймификация)
  EXPENSE      // Расход в системе (например, на платный ресурс - не в MVP)
  // Добавить другие типы по мере необходимости
}

// Модели для Social - не в MVP
/*
model SocialConnection { ... }
enum ConnectionStatus { ... }
*/

5. Пользовательский Опыт (UX) и Путь Пользователя (User Journey) - MVP
5.1. Ключевые Принципы UX

Быстрая Демонстрация Ценности: Пользователь должен максимально быстро понять, как приложение может помочь ему достичь своих мечт и целей.

Эмоциональное Вовлечение: Использование визуальных образов и историй успеха для мотивации и вдохновения.

Персонализация с Первого Шага: Возможность быстро указать интересующие сферы жизни для релевантных рекомендаций.

Интерактивность и Геймификация: Поощрение действий пользователя через награды (внутренние баллы/токены в MVP) и понятный прогресс.

Простота и Ясность: Интуитивно понятный интерфейс, особенно в части взаимодействия с ИИ.

5.2. Путь Нового Пользователя (Onboarding & Initial Engagement)

Авторизация: Вход через Telegram, Google или Apple.

Приветствие и Выбор Интересов:

Краткое приветствие, миссия WeAi.

Предложение выбрать 1-3 важные сферы жизни (Карьера, Финансы, Здоровье и т.д.) через кликабельные карточки/иконки. Выбор сохраняется в User.preferences.interestAreas.

Лента Вдохновения и Выбора Целей (/feed или /):

Персонализированная (на основе интересов) лента карточек:

Кейсы/Истории Успеха: Картинка + текст ("Как [Имя] с WeAi..."). На старте - шаблонные.

Предложения Целей: Картинка + формулировка цели ("Найти первых 3 клиентов", "Начать бегать").

Клик на цель -> опция "Добавить в мои Желания/Цели".

Первая Геймификация и Награда:

Задание: "Выберите 3 цели из ленты и добавьте их на свою 'Карту Желаний'".

Виджет/Уведомление: Показывает задание.

Награда: После добавления 3-й цели -> уведомление "Отлично! Ваша награда: [N] баллов зачислена на ваш баланс!". Создается FinanceTransaction типа REWARD. (Важно: В MVP используем внутренние баллы, не USDT!)

Переход к Планированию: Направление на "Карту Желаний" (/goals/wishmap) или список целей (/goals/list).

Планирование с ИИ: На карточке цели кнопка "Спланировать с ИИ" -> ИИ предлагает шаги (задачи) -> Пользователь принимает/редактирует -> Задачи создаются и связываются с целью.

Дальнейшее Взаимодействие: Выполнение задач, трекинг прогресса, новые рекомендации.

5.3. Пользовательский Опыт Существующего Пользователя

Лента/Главная: Актуальные задачи, прогресс, новые релевантные рекомендации.

Взаимодействие с ИИ: Помощь по целям, задачам, поиск информации.

Геймификация: Награды за достижение целей, выполнение задач.

Разделы: Легкий доступ к Целям, Задачам, Финансам (баланс, история наград), Профилю.

6. Основные Экраны / Разделы Приложения (MVP)

Авторизация: Страницы входа, кнопки провайдеров, callback.

Выбор Интересов (Онбординг): Модальное окно или отдельная страница при первом входе.

Лента / Главная (/ или /feed): Персонализированная лента с карточками кейсов и целей. Виджет геймификации (текущее задание).

Цели (/goals):

Карта Желаний (/goals/wishmap): Визуальное представление целей (isWish=true). Добавление, перемещение. (MVP: может быть упрощено до списка).

Список Целей (/goals/list): Список/карточки целей. Фильтры.

Создание/Редактирование Цели: Форма ввода. Кнопка "Помочь спланировать" (вызов ИИ).

Просмотр Цели: Детали, связанные задачи, план от ИИ.

Рекомендации ИИ: Блок с предложениями новых целей.

Задачи (/tasks):

Список задач (фильтры).

Быстрое добавление.

Отметка о выполнении.

Форма создания/редактирования (опциональная привязка к цели).

ИИ-Ассистент (/ai или интегрирован):

Интерфейс чата или поле ввода для запроса.

Контекст (общий, по цели/задаче).

Отображение ответа/предложений ИИ.

Механизм обратной связи (AIInteraction.userFeedback).

Финансы (/finance):

Отображение текущего баланса (внутренних баллов/токенов).

История транзакций (тип REWARD в MVP).

Social (/social):

Экран-заглушка ("Скоро здесь появятся социальные функции!").

Профиль Пользователя (/profile):

Просмотр/редактирование данных (имя, аватар).

Управление настройками (User.preferences, включая interestAreas).

Выход.

7. Ключевые Пользовательские Сценарии (User Flows - MVP)

Onboarding и Первая Цель: Пользователь -> Вход -> Выбор интересов -> Просмотр Ленты -> Выбор 3 целей (выполнение задания) -> Получение награды -> Переход к Цели -> Клик "Спланировать с ИИ" -> Получение плана (задач) -> Принятие плана.

Добавление и Выполнение Задачи: Пользователь -> Раздел "Задачи" (или "Цель") -> Добавить задачу -> Ввод данных -> Сохранить -> Позже: Отметить задачу как выполненную.

Получение Рекомендации от ИИ: Пользователь -> Лента или раздел "Цели" -> Видит блок "Рекомендации" -> Кликает -> Создает новую цель.

Обращение к ИИ за Помощью: Пользователь -> Вводит вопрос в поле ИИ (например, "Как лучше подойти к задаче X?") -> Получает ответ/совет -> Оценивает ответ (палец вверх/вниз).

8. Принципы Использования ИИ-Ассистентов в Разработке

Контекст: Эта документация (особенно разделы 4, 6, 7) является основным контекстом для ИИ-ассистентов программирования. Ссылайтесь на модели данных (prisma.schema), компоненты UI и User Flows.

Итеративность: Начинайте с простых запросов ("Создай React-компонент для отображения списка задач на основе модели Task"), постепенно усложняйте.

Верификация: Всегда проверяйте код, сгенерированный ИИ, на корректность, безопасность и эффективность.

Обновление Документации: Важные решения, принятые в ходе разработки (даже с помощью ИИ), должны отражаться в этой документации.

9. Настройка Проекта и Запуск
# 1. Клонировать репозиторий
git clone [URL репозитория]
cd weai-assist-app # Или как будет называться папка

# 2. Установить зависимости
npm install # или yarn install

# 3. Настроить переменные окружения
cp .env.example .env
# Заполнить .env (DATABASE_URL, ключи NextAuth, ключи API для ИИ и т.д.)

# 4. Применить миграции базы данных
npx prisma migrate dev

# 5. Запустить сервер разработки
npm run dev # или yarn dev

# 6. Открыть приложение в браузере
# http://localhost:3000
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
10. Будущие Направления (Post-MVP Roadmap)

Расширенный ИИ: Анализ контента, проактивный поиск возможностей, адаптивное планирование, ИИ-бизнес-ассистент.

Контент: Агрегация, персонализация, создание контента пользователями.

Финансы: Интеграция с реальными платежными системами (включая крипто), бюджетирование, инвестиции внутри платформы, вывод наград.

Социальное Взаимодействие: Профили, поиск, группы, совместные цели, обмен ресурсами.

Управление Ресурсами: Учет навыков, времени, материальных ресурсов.

Геймификация: Расширенные механики, уровни, достижения.

Мобильное приложение.

Децентрализация (Долгосрочно): Web3 интеграции, управление данными.

11. Контрибьюция

(Раздел о правилах контрибьюции, стиле кода, процессе Pull Request - заполнить позже, когда проект станет открытым или будет команда).

Рекомендации для старта MVP:

Фокус на Core Loop: Сосредоточьтесь на цикле: Выбор цели -> Планирование с ИИ -> Создание задач -> Выполнение задач. Онбординг и геймификация должны поддерживать этот цикл.

ИИ - Начните Просто: Используйте внешние API (GPT, Claude) для NLP и генерации планов. Сначала можно обойтись без сложной логики на бэкенде, просто передавая запросы и обрабатывая ответы. Не усложняйте ИИ в MVP.

Геймификация - Баллы: Используйте внутренние баллы/токены для наград. Это легко реализовать и протестировать механику. Вопросы реальных денег (USDT) отложите на потом.

Документируйте Решения: Любые важные архитектурные или технологические выборы фиксируйте.
